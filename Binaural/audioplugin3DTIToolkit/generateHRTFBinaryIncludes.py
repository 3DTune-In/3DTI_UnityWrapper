#!/usr/bin/python3

'''
This script converts binary HRTF files into C++ header/source file defining a binary array for each file.

Files will be stored in a std::map<std::string, const unsigned char[]> variable
'''

import os, binascii, textwrap

path_to_3dti_AudioToolkit_resources_directory = '../../3dti_AudioToolkit/resources/'
input_files = [
    os.path.join(*'HRTF/3DTI/3DTI_HRTF_IRC1008_512s_44100Hz.3dti-hrtf'.split('/')),
    os.path.join(*'HRTF/3DTI/3DTI_HRTF_IRC1008_512s_48000Hz.3dti-hrtf'.split('/')),
    os.path.join(*'HRTF/3DTI/3DTI_HRTF_IRC1008_512s_96000Hz.3dti-hrtf'.split('/')),
]
output_directory = os.path.join(*'src_autogenerated'.split('/'))
output_filename = 'hrtfBinaries' # Excluding .h or .cpp
# output_namespace = 'Spatializer3DTI' # leave blank for global namespace
# output_map_name = 'hrtfBinaries' # Must be C++ compatible variable name

os.makedirs(output_directory, exist_ok=True)

print(f"Number of binary files: {len(input_files)}")





header_path = os.path.join(output_directory, output_filename+'.h')
print("Writing header file to", header_path)
with open(header_path, 'w') as header_file:
    header_file.write('''
// ***************
// AUTOGENERATED FILE - DO NOT EDIT THIS FILE MANUALLY
// MODIFY AND RUN generateHRTFBinaryIncludes.py TO UPDATE
// ***************

#pragma once
#include <map>
#include <string>
#include <vector>

namespace Spatializer3DTI
{

    extern const std::map<std::string, std::vector<unsigned char>> hrtfBinaries;

}

''')


# Example output source:
# #include hrtfBinaries.h
# 
# namespace Spatializer3DTI {
#     const std::map<std::string, const unsigned char[]> hrtfBinaries {
#         { "binary0", (const unsigned char[]){ 0x24, 0x64, 0x1f } },
#         { "binary1", (const unsigned char[]){ 0x26, 0xa4, 0x3f } },
#     };
# 
# }


source_path = os.path.join(output_directory, output_filename+'.cpp')
print("Writing source file to", source_path)
with open(source_path, 'w') as source_file:
    # source_file.write(output_source)
    source_file.write(f'''
// ***************
// AUTOGENERATED FILE - DO NOT EDIT THIS FILE MANUALLY
// MODIFY AND RUN generateHRTFBinaryIncludes.py TO UPDATE
// ***************

#include "{output_filename}.h"

namespace Spatializer3DTI
{{

    const std::map<std::string, std::vector<unsigned char>> hrtfBinaries {{
''')
    outer_indent = ' '*4
    inner_indent = outer_indent + ' '*4
    for filename in input_files:
        path = os.path.join(path_to_3dti_AudioToolkit_resources_directory, filename)
        print("Processing file",path)
        with open(path, 'rb') as file:
            data = file.read()
            map_key = os.path.basename(filename)
            source_file.write(f'{outer_indent}{{ "{map_key}",  std::vector<unsigned char>{{' '\n')
            hex_string = ', '.join((f'{b:#04x}' for b in data))
            # e.g. 0xa3, 0x12, 0x00
            # hex_string = '0x' + binascii.hexlify(data, ', 0x')
            hex_string = textwrap.fill(hex_string, break_long_words=False)
            hex_string = textwrap.indent(hex_string, inner_indent)
            source_file.write(hex_string)
        source_file.write('\n' + outer_indent + '} },\n')

    source_file.write('''
    };
}
    ''')

print("Completed.")

